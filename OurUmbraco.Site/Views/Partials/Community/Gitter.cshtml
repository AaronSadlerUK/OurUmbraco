@using ClientDependency.Core.Mvc
@model GitterSharp.Model.Room
@{
    Html.RequiresJs("https://ajax.aspnetcdn.com/ajax/signalr/jquery.signalr-2.2.2.js");
    Html.RequiresJs("~/signalr/hubs");
    

    //Need Room ID passed in
    var roomId = Model.Id;

    //Topic/room name desription
    var roomName = Model.Topic;

    //Need this passed in
    var roomUrl = "https://gitter.im/" + Model.Uri;
}

@* This is the main init render in the DOM *@
<section class="gitter-chat">
    <div class="container">
        <div class="row">
            <div class="col-md-5">
                <h1 class="text-center">@roomName</h1>
                <p>
                    Come and join in the discussion over on our lively & active
                    Gitter community chat, where you can discuss all things Umbraco.
                </p>
                <p>
                    <a class="button green" href="@roomUrl">Join the discussion on Gitter &rarr;</a>
                </p>
            </div>
            <div class="col-md-7">
                <div class="gitter-room" data-room="@roomId">
                    <ul class="umb-load-indicator animated -half-second">
                        <li class="umb-load-indicator__bubble"></li>
                        <li class="umb-load-indicator__bubble"></li>
                        <li class="umb-load-indicator__bubble"></li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</section>


@* Mustache JS template to render a collection of chat messages that re-uses template for single message *@
<script type="text/template" id="gitter-chat-messages-template">
    {{ #. }}
    {{ >message }}
    {{ /. }}
    <div class="gradient"></div>
</script>

@* Mustache JS template to render a single chat message *@
<script type="text/template" id="gitter-chat-template">
    <div class="gitter-message" data-message-id="{{ id }}">

        <div class="avatar">
            <img src="{{ fromUser.avatarUrlMedium }}" alt="{{ fromUser.displayName }}" />
        </div>

        <div class="message-container">
            <div class="user">
                <strong class="name">{{ fromUser.displayName }}</strong>
                <span class="username">@@{{ fromUser.username }}</span>
                <span class="date">{{ friendlyDate }}</span>
            </div>

            <div class="gitter-message-text">
                {{{ html }}}
            </div>
        </div>

        

    </div>
</script>

@* SignalR JS client code - TODO move to seperate JS file *@
<script>
    $(function () {
        //Get existing value from SessionStorage
        var roomIds = JSON.parse(sessionStorage.getItem("gitterRoomIds") || null);
        if (!roomIds) {
            roomIds = ["@roomId"];
        } else {
            roomIds.push("@roomId");
        }
        
        var numberOfMessages = 4;


        //Now array is updated - lets push it into sessionStorage
        sessionStorage.setItem('gitterRoomIds', JSON.stringify(roomIds));
        
        // Reference the auto-generated proxy for the hub.
        var gitter = $.connection.gitterHub;

        //Currently unused - but ready to work
        gitter.client.prescenceEvent = function(data) {
            console.log('User Presence', data);
        };

        //Currently unused - but ready to work
        gitter.client.roomEvent = function(data) {
            console.log('Room event', data);
        };

        //Currently unused - but ready to work
        gitter.client.userEvent = function(data) {
            console.log('User event', data);
        };

        gitter.client.chatMessage = function(data) {

            //If the payload is 'remove' then user has deleted message
            if (data.operation === 'remove') {
                //Check if the current message being displayed in the DOM
                //Matches the ID of this item we want to remove
                if (checkMessageIsInDom(data.message.id)) {
                    //If so call the SignalR server event to get last message
                    //Which will then call back to fetchedChatMessage
                    $.connection.gitterHub.server.getLatestChatMessages(data.room, numberOfMessages);
                }
            }

            //Operation is 'create' so just update the DOM instantly
            if (data.operation === 'create') {

                //Need to remove the first DOM item in the container
                //As its the oldest
                $(".gitter-room[data-room='" + data.room + "'] .gitter-message:first-child").remove();

                //Insert new item in the container at the bottom
                $(".gitter-room[data-room='" + data.room + "']").append(renderMustacheTemplate(data.message));
            }

            //Operation is 'update' - need to check if its the current message being displayed
            if (data.operation === 'update') {
                if (checkMessageIsInDom(data.message.id)) {
                    //If so then update the DOM item
                    $(".gitter-room[data-room='" + data.room + "'] .gitter-message[data-message-id='" + data.message.id + "']")
                        .replaceWith(renderMustacheTemplate(data.message));
                }
            }

        };

        gitter.client.fetchedChatMessage = function(data) {

            //On init load of SignalR, it's pinged from client to server to fetch latest message
            //Via Gitter API which returns a collection of messages (even though its one message)
            var html = renderMultipleMustacheTemplate(data.messages);

            $(".gitter-room[data-room='" + data.room + "']").html(html);
        };
        

        function checkMessageIsInDom(messageId) {
            var foundInDom = $(".gitter-message[data-message-id='" + messageId + "']");
            return foundInDom.length > 0;
        }

        function renderMultipleMustacheTemplate(data) {

            var innerTemplate = $('#gitter-chat-template').html();
            var outerTemplate = $('#gitter-chat-messages-template').html();

            var output = Mustache.render(outerTemplate, data, {
                message: innerTemplate
            });
            
            return output;
        };

        function renderMustacheTemplate(data) {

            //Render mustache js template with JSON data
            //This is used for single messages coming from the realtime api
            //Where the main message payload is a subobject stored in 'model'
            var template = $('#gitter-chat-template').html();
            var html = Mustache.render(template, data);
            return html;
        }
    });

</script>