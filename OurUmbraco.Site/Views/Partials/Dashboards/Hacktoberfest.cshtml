@using OurUmbraco.Our.Api
@using OurUmbraco.Our.Models.GitHub
@inherits OurUmbraco.Our.Models.OurUmbracoTemplatePage
@{
    var repository = "";
    if (string.IsNullOrWhiteSpace(Request.QueryString["repository"]) == false)
    {
        repository = Request.QueryString["repository"];
    }

    var startYear = 2019;
    if (string.IsNullOrWhiteSpace(Request.QueryString["startYear"]) == false)
    {
        int.TryParse(Request.QueryString["startYear"], out startYear);
    }

    var startMonth = 9;
    if (string.IsNullOrWhiteSpace(Request.QueryString["startMonth"]) == false)
    {
        int.TryParse(Request.QueryString["startMonth"], out startMonth);
    }

    var startDate = new DateTime(startYear, startMonth, 1);

    var controller = new DashboardStatisticsController();
    var pullRequestsGrouped = controller.GetPullRequestsGrouped(repository: repository, startYear: startYear, startMonth: startMonth)
        .ToList();

    var firstHacktoberfestEligiblePullsPerUser = new List<HacktoberFestEligible>();

    foreach (var group in pullRequestsGrouped)
    {
        foreach (var contribution in group.Contributors.Where(x => x.IsSwagHunter == false))
        {
            // Don't add HQ contributions that have not been marked as eligible
            if (contribution.IsHQ && contribution.Contributions.Any(x => x.IsHacktoberfestEligible) == false)
            {
                continue;
            }

            if (group.Period.StartsWith(startYear.ToString()) && (group.Period.EndsWith("09") || group.Period.EndsWith("10")))
            {
                foreach (var contrib in contribution.Contributions.Where(x => x.CloseState != "closed"))
                {
                    if (group.Period.EndsWith("10") || group.Period.EndsWith("09") && contrib.IsHacktoberfestEligible)
                    {
                        var existingUser = firstHacktoberfestEligiblePullsPerUser.FirstOrDefault(x => x.UserLogin == contribution.User.Login);

                        if (existingUser != null)
                        {
                            existingUser.Issues.Add(contrib);
                        }
                        else
                        {
                            var hacktoberFestEligible = new HacktoberFestEligible
                            {
                                Issues = new List<Issue>(),
                                UserLogin = contribution.User.Login
                            };
                            hacktoberFestEligible.Issues.Add(contrib);
                            firstHacktoberfestEligiblePullsPerUser.Add(hacktoberFestEligible);
                        }
                    }
                }
            }
        }
    }

    var filteredPulls = new List<HacktoberFestEligible>();
    foreach (var userContributions in firstHacktoberfestEligiblePullsPerUser)
    {
        var mergedIssues = userContributions.Issues.Where(x => x.CloseState == "merged").ToList();
        if (mergedIssues.Count == userContributions.Issues.Count && userContributions.Issues.All(x => x.IsHacktoberfestEligible) == false)
        {
            continue;
        }

        filteredPulls.Add(userContributions);
    }
    var allUsers = new List<string>();
    foreach (var hacktoberFestEligible in filteredPulls.OrderBy(x => x.UserLogin))
    {
        allUsers.Add(hacktoberFestEligible.UserLogin);
    }
}

@functions
{
    private class HacktoberFestEligible
    {
        public string UserLogin { get; set; }
        public List<Issue> Issues { get; set; }
    }
}

<h1>🍂</h1>

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Hacktoberfest list for @(startDate.ToString("yyyy"))</h6>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-sm-12">

                <p>
                    <strong>Unique contributors (no swaghunters): @(allUsers.Count)</strong>
                    @* <br/>@(string.Join(",", allUsers)) *@
                </p>

                @foreach (var item in filteredPulls.OrderBy(x => x.UserLogin))
                {
                    <ul>
                        @{
                            var contrib = item.Issues.OrderByDescending(x => x.IsHacktoberfestEligible).ThenBy(x => x.CreateDateTime).FirstOrDefault();
                            var stateColor = "orange";
                            if (contrib.CloseState == "merged")
                            {
                                stateColor = "green";
                            }
                            if (contrib.CloseState == "closed")
                            {
                                stateColor = "red";
                            }
                            var approvalColor = contrib.ReviewApprovals > 0 ? "lightgreen" : "";
                            var changesRequestedColor = contrib.ReviewChangesRequested > 0 ? "lightpink" : "";
                        }
                        <li>
                            <strong>@(item.UserLogin)</strong>
                            <span>| @contrib.CreateDateTime.ToString("yyyy-MM-dd")</span>
                            <span>| <a href="https://github.com/umbraco/@(contrib.RepositoryName)/pull/@(contrib.Number)" target="_blank">@(contrib.RepositoryName)/@(contrib.Number)</a></span>
                            <span>| <strong style="color: @stateColor">@contrib.CloseState</strong></span>
                            <span>| @contrib.Title</span>
                            <span>| <span style="font-size: 60%; font-weight: bold; color: black; background-color: @approvalColor; padding: 4px">A: @contrib.ReviewApprovals</span></span>
                            <span>| <span style="font-size: 60%; font-weight: bold; color: black; background-color: @changesRequestedColor; padding: 4px">C: @contrib.ReviewChangesRequested</span></span>
                            @if (contrib.IsUsersFirstContributionToAnyUmbracoRepository)
                            {
                                <span style="font-size: 60%; font-weight: bold; color: black; background-color: lightgreen; padding: 4px">first ever contrib</span>
                            }
                            @if (contrib.IsUsersFirstContributionToThisRepository)
                            {
                                <span style="font-size: 60%; font-weight: bold; color: black; background-color: yellow; padding: 4px">first contrib to this repo</span>
                            }
                            @if (contrib.IsHacktoberfestEligible)
                            {
                                <span style="font-size: 60%; font-weight: bold; color: white; background-color: red; padding: 4px">hacktoberfest</span>
                            }

                            @*
                                @if (item.Issues.Count > 1)
                                {
                                    <br/>
                                    <span>
                                        <em>Other PRs by this user</em>
                                    </span>
                                    <ul>
                                        @foreach (var other in item.Issues.OrderBy(x => x.CreateDateTime).Where(x => x.Number != contrib.Number))
                                        {
                                            stateColor = "orange";
                                            if (other.CloseState == "merged")
                                            {
                                                stateColor = "green";
                                            }
                                            if (other.CloseState == "closed")
                                            {
                                                stateColor = "red";
                                            }
                                            approvalColor = other.ReviewApprovals > 0 ? "lightgreen" : "";
                                            changesRequestedColor = other.ReviewChangesRequested > 0 ? "lightpink" : "";

                                            <li>
                                                <span>@other.CreateDateTime.ToString("yyyy-MM-dd")</span>
                                                <span>| <a href="https://github.com/umbraco/@(other.RepositoryName)/pull/@(other.Number)" target="_blank">@(other.RepositoryName)/@(other.Number)</a></span>
                                                <span>| <strong style="color: @stateColor">@other.CloseState</strong></span>
                                                <span>| @other.Title</span>
                                                <span>| <span style="font-size: 60%; font-weight: bold; color: black; background-color: @approvalColor; padding: 4px">A: @other.ReviewApprovals</span></span>
                                                <span>| <span style="font-size: 60%; font-weight: bold; color: black; background-color: @changesRequestedColor; padding: 4px">C: @other.ReviewChangesRequested</span></span>
                                                @if (other.IsUsersFirstContributionToAnyUmbracoRepository)
                                                {
                                                    <span style="font-size: 60%; font-weight: bold; color: black; background-color: lightgreen; padding: 4px">first ever contrib</span>
                                                }
                                                @if (other.IsUsersFirstContributionToThisRepository)
                                                {
                                                    <span style="font-size: 60%; font-weight: bold; color: black; background-color: yellow; padding: 4px">first contrib to this repo</span>
                                                }
                                                @if (other.IsHacktoberfestEligible)
                                                {
                                                    <span style="font-size: 60%; font-weight: bold; color: white; background-color: red; padding: 4px">hacktoberfest</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                }
                            *@
                        </li>

                    </ul>
                }
            </div>
        </div>
    </div>
</div>