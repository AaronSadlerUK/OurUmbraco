@using System.Text.RegularExpressions
@using OurUmbraco.Forum.Extensions
@using OurUmbraco.Videos
@using Skybrud.Essentials.Strings
@using Skybrud.Essentials.Strings.Extensions
@using Skybrud.Social.Vimeo.Models.Videos
@inherits UmbracoViewPage

@{

    var repo = new VideosService();

    if (Request.QueryString["force-update"] == "1" && Members.IsAdmin())
    {
        repo.UpdateVimeoVideos("umbraco");
    }

    var allVideos = repo.GetVimeoVideosFromDisk("umbraco");
    var categories = repo.GroupVideosByCategoryAndYear(allVideos);

    string baseUrl = Request.RawUrl.Split('?')[0];

    string categoryName = Request.QueryString["category"];
    string categoryYear = Request.QueryString["year"];
    

    IEnumerable<VimeoVideo> videos;

    VideosCategory selectedCategory = null;
    int selectedYear = 0;

    if (String.IsNullOrWhiteSpace(categoryName))
    {
        videos = allVideos;
    }
    else
    {
        selectedCategory = categories.FirstOrDefault(x => x.Name.ToKebabCase() == categoryName);
        selectedYear = StringUtils.ParseInt32(categoryYear);

        if (selectedCategory == null)
        {
            <p>Nay</p>
            return;
        }

        if (selectedYear > 0)
        {
            List<VimeoVideo> yearVideos;
            if (!selectedCategory.TryGetYear(selectedYear, out yearVideos))
            {
                <p>Nay</p>
                return;
            }
            videos = yearVideos;
        }
        else
        {
            videos = selectedCategory.Videos;
        }

    }

    // Count the total amount of videos matching the parameters
    int videosCount = videos.Count();

}

<div class="has-sidebar">
    <div class="page-content">
        <div id="overlay" class="overlay"></div>
        <div class="sidebar-area">
            <div class="sidebar-content">
                <div class="content-wrapper">
                    <nav>
                        <ul class="level-1">
                                
                            @foreach (var category in categories)
                            {
                                string name = category.Name.ToKebabCase();
                                bool active = categoryName == name;
                                <li class="@(active ? "active open" : null)">
                                    <a href="@GetCategoryLink(category)"><h3>@category.Name</h3></a>
                                    @if (active)
                                    {
                                        <ul class="level-2 open">
                                            @foreach (int year in category.Years.OrderByDescending(x => x))
                                            {
                                                <li class="@(year.ToString() == categoryYear ? "active" : null)">
                                                    <a href="@GetCategoryLink(category, year)"><h4>@year</h4></a>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
        <div class="main-area">
            <div class="main-content">
                <div class="content-wrapper">
                    <ul id="breadcrumb">
                        <li><a href="@Model.Parent.Url">Our</a></li>
                        <li><a href="@Model.Url">@Model.Name</a></li>
                        @if (selectedCategory != null)
                        {
                            <li><a href="@GetCategoryLink(selectedCategory)">@selectedCategory.Name</a></li>
                            if (selectedYear > 0)
                            {
                                <li><a href="@GetCategoryLink(selectedCategory, selectedYear)">@selectedYear</a></li>
                            }
                        }
                    </ul>
                    <div class="community-content">
                        <h1 style="color: red; margin-bottom: 20px;">Note: this is a WIP page, you can only see this because you have the admin role on Our, this page is not publicly available - no sharing yet please :-)</h1>
                        <div class="videos-list">
                            <h1>Videos</h1>
                            <div class="videos-list-meta">
                                Showing @videosCount @(videosCount == 1 ? "video" : "videos")
                                @if (selectedCategory != null)
                                {
                                    <span>matching <strong>@selectedCategory.Name</strong></span>
                                    if (selectedYear > 0)
                                    {
                                        <span>and <strong>@selectedYear</strong></span>
                                    }
                                }
                            </div>
                            @foreach (var video in videos)
                            {

                                var thumbnail = video.Pictures.Sizes.FirstOrDefault(x => x.Width >= 350);

                                <div class="videos-item">
                                    <div class="videos-details">
                                        <a href="@video.Link" target="_blank" rel="noopener"><strong>@video.Name</strong></a>
                                        <div class="videos-meta">
                                            @video.CreatedTime.ToString("MMM d, yyyy")
                                            &ndash;
                                            @video.Duration.TotalMinutes.ToString("N0") min
                                            &ndash;
                                            @video.Stats.Plays @(@video.Stats.Plays == 1 ? "play" : "plays")
                                            @if (video.MetaData.Connections.Likes.Total > 0)
                                            {
                                                <span>
                                                    &ndash;
                                                    @video.MetaData.Connections.Likes.Total likes
                                                </span>
                                            }
                                        </div>
                                        @if (video.HasTags)
                                        {
                                            <div class="videos-tags">
                                                @foreach (var tag in video.Tags)
                                                {
                                                    <span class="videos-tag">@tag.Name</span>
                                                }
                                            </div>
                                        }
                                        @if (video.HasDescription)
                                        {
                                            string pattern = @"(((http|ftp|https):\/\/)?[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?)";

                                            string html = StringUtils.StripHtml(video.Description).Replace("\n", "<br />\n");

                                            Regex rgxUrls = new Regex(pattern);
                                            html = rgxUrls.Replace(html, "<a href=\"$1\" target=\"_blank\" rel=\"noopener\">$1</a>");

                                            <div class="videos-description">@Html.Raw(html)</div>
                                        }
                                    </div>
                                    @if (thumbnail != null)
                                    {
                                        <a href="#" class="videos-thumbnail" onclick="playVimeoVideo(this, '@video.Id'); return false;">
                                            <div class="videos-thumbnail-overlay">
                                                <i class="icon-Video"></i>
                                            </div>
                                            <div class="videos-thumbnail-background" style="background-image: url(@thumbnail.Link);"></div>
                                        </a>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {

    public string GetCategoryLink(VideosCategory category)
    {
        return Model.Url + category.Name.ToKebabCase() + "/";
    }

    public string GetCategoryLink(VideosCategory category, int year)
    {
        return Model.Url + category.Name.ToKebabCase() + "/" + year + "/";
    }

}


<style>
    .videos-list h1 {
        font-size: 2.1rem;
    }
    .videos-list .videos-list-meta {
        font-size: 12px;
        margin-top: 10px;
        margin-bottom: 30px;
    }
    .videos-item {
        display: flex;
    }
    .videos-item + .videos-item {
        margin-top: 30px;
    }
    .videos-thumbnail {
        min-width: 350px;
        width: 350px;
        margin-right: 10px;
    }
    .videos-details {
        flex-grow: 1;
    }
    .videos-meta {
        margin: 5px 0;
        font-size: 12px;
    }

    .videos-tags {
        display: flex;
        flex-wrap: wrap;
    }
    .videos-tag
    {
        text-align: center;
        right: 25px;
        color: #3e6b1c;
        font-weight: 700;
        background: #a3db78;
        border-radius: 15px;
        z-index: 5;
        margin-right: 5px;
        font-size: 11px;
        padding: 2px 7px;
    }

    .videos-tags + .videos-description {
        margin-top: 5px;
    }

    .videos-details {
        order: 2;
    }

    .videos-thumbnail {
        display: block;
        position: relative;
        height: 200px;
        background-size: cover;
        order: 1;
    }

    .videos-thumbnail-overlay {
        display: none;
        background: rgba(0, 0, 0, 0.5);
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        z-index: 5;
    }

    .videos-thumbnail iframe {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        z-index: 10;
    }

    a.videos-thumbnail:hover .videos-thumbnail-overlay {
        display: block;
    }

    .videos-thumbnail-overlay i {
        color: white;
        /* line-height: 200px; */
        position: absolute;
        top: 50%;
        font-size: 50px;
        left: 0;
        right: 0;
        text-align: center;
        line-height: 50px;
        margin-top: -25px;
    }

    .videos-thumbnail-background {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
    }

    @@media (max-width: 750px) {
        .videos-item {
            display: block;
        }
        .videos-thumbnail {
            padding-top: 50%;
            margin-top: 10px;
            min-width: initial;
            width: initial;
        }
    }

</style>

<script>

    function playVimeoVideo(e, id) {

        $('<iframe/>').attr({
            src: 'https://player.vimeo.com/video/' + id + '?autoplay=1&amp;badge=0&amp;player_id=0',
            frameborder: 0,
            webkitallowfullscreen: '',
            mozallowfullscreen: '',
            allowfullscreen: '',
            style: 'width: 100%; height: 100%;'
        }).appendTo(e);

        $('.videos-thumbnail-overlay', e).remove();
        $('.videos-thumbnail-background', e).remove();

    }

</script>